generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./banana-trading.db"
}

// ===================
// Core Trading Models
// ===================

model Item {
  id                  Int                 @id @default(autoincrement())
  name                String              @unique
  description         String?
  unit                UnitType            @default(KG)
  purchaseRate        Float               @default(0.0)
  salesRate           Float               @default(0.0)
  currentStock        Float               @default(0.0)
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  purchaseItems       PurchaseItem[]
  saleItems           SaleItem[]
  inventorySnapshots  InventorySnapshot[]
}

model Supplier {
  id        Int        @id @default(autoincrement())
  name      String
  phone     String?    @unique
  address   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  purchases Purchase[]
  payments  Payment[] // Payments *made to* this supplier
}

model Customer {
  id        Int       @id @default(autoincrement())
  name      String
  phone     String?   @unique
  address   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sales     Sale[]
  receipts  Receipt[] // Receipts *received from* this customer
}

model Purchase {
  id           Int          @id @default(autoincrement())
  supplierId   Int
  supplier     Supplier     @relation(fields: [supplierId], references: [id], onDelete: Restrict)
  totalAmount  Float        // Total amount of the purchase
  paidAmount   Float        @default(0) // Sum of associated Payments
  // balance Float @default(0) // Removed: Calculated (totalAmount - paidAmount)
  date         DateTime     @default(now())
  invoiceNo    String?      @unique
  items        PurchaseItem[]
  payments     Payment[]    // Multiple payments can be linked to a single purchase
  transaction  Transaction?
}

model PurchaseItem {
  id              Int     @id @default(autoincrement())
  purchaseId      Int
  itemId          Int
  quantity        Float
  weightDeduction Float   @default(1.5)
  rate            Float
  amount          Float

  purchase Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  item     Item     @relation(fields: [itemId], references: [id])
}

model Sale {
  id             Int        @id @default(autoincrement())
  customerId     Int
  customer       Customer   @relation(fields: [customerId], references: [id], onDelete: Restrict)
  totalAmount    Float      // Total amount of the sale
  receivedAmount Float      @default(0) // Sum of associated Receipts
  // balance Float @default(0) // Removed: Calculated (totalAmount - receivedAmount)
  date           DateTime   @default(now())
  invoiceNo      String?    @unique
  items          SaleItem[]
  receipts       Receipt[]  // Multiple receipts can be linked to a single sale
  transaction    Transaction?
}

model SaleItem {
  id       Int   @id @default(autoincrement())
  saleId   Int
  itemId   Int
  quantity Float
  rate     Float
  amount   Float

  sale Sale @relation(fields: [saleId], references: [id], onDelete: Cascade)
  item Item @relation(fields: [itemId], references: [id])
}

// Modified Payment model to represent a single payment instance by a method
model Payment {
  id              Int               @id @default(autoincrement())
  supplierId      Int?              // Could be null if payment is not directly tied to a supplier (e.g., general expense paid)
  purchaseId      Int?              // Link to a specific Purchase if this payment is for it
  paymentMethod   PaymentMethodType // NEW: Type of payment method
  amount          Float
  reference       String?           // e.g., Cheque number, UPI transaction ID, last 4 digits of card
  notes           String?
  date            DateTime          @default(now())
  transaction     Transaction?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  supplier        Supplier?         @relation(fields: [supplierId], references: [id]) // Make optional
  purchase        Purchase?         @relation(fields: [purchaseId], references: [id])

  // You might want a unique constraint if (purchaseId, paymentMethod, reference) should be unique
  // @@unique([purchaseId, paymentMethod, reference]) // Consider if a payment method with no reference can be unique
}

// Modified Receipt model to represent a single receipt instance by a method
model Receipt {
  id              Int               @id @default(autoincrement())
  customerId      Int?              // Could be null if receipt is not directly tied to a customer (e.g., general income)
  saleId          Int?              // Link to a specific Sale if this receipt is for it
  paymentMethod   PaymentMethodType // NEW: Type of payment method
  amount          Float
  reference       String?           // e.g., Cheque number, UPI transaction ID, last 4 digits of card
  notes           String?
  date            DateTime          @default(now())
  transaction     Transaction?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  customer        Customer?         @relation(fields: [customerId], references: [id]) // Make optional
  sale            Sale?             @relation(fields: [saleId], references: [id])

  // @@unique([saleId, paymentMethod, reference]) // Consider if a payment method with no reference can be unique
}


// ==================
// Accounting System
// ==================

model Transaction {
  id           Int             @id @default(autoincrement())
  type         TransactionType
  amount       Float
  description  String
  date         DateTime        @default(now())
  referenceNo  String?
  notes        String?

  purchaseId   Int?            @unique
  saleId       Int?            @unique
  paymentId    Int?            @unique
  receiptId    Int?            @unique
  categoryId   Int?
  bankTransactionId Int?       @unique // Keep @unique here

  purchase     Purchase?       @relation(fields: [purchaseId], references: [id])
  sale         Sale?           @relation(fields: [saleId], references: [id])
  payment      Payment?        @relation(fields: [paymentId], references: [id])
  receipt      Receipt?        @relation(fields: [receiptId], references: [id])
  category     ExpenseCategory? @relation(fields: [categoryId], references: [id])
  bankTransaction BankTransaction? @relation // MODIFIED: Removed fields and references here

  entries      TransactionEntry[]
}

model TransactionEntry {
  id            Int         @id @default(autoincrement())
  transactionId Int
  accountId     Int
  debitAmount   Float       @default(0)
  creditAmount  Float       @default(0)
  description   String?

  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  account       Account     @relation(fields: [accountId], references: [id])
}

model Account {
  id          Int                @id @default(autoincrement())
  code        String             @unique
  name        String
  type        AccountType
  parentId    Int?
  isActive    Boolean            @default(true)
  description String?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  parent      Account?           @relation("AccountHierarchy", fields: [parentId], references: [id])
  children    Account[]          @relation("AccountHierarchy")
  entries     TransactionEntry[]
}

model ExpenseCategory {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  description String?
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  transactions Transaction[]
}

model CashBook {
  id          Int      @id @default(autoincrement())
  date        DateTime @default(now())
  openingCash Float    @default(0)
  cashIn      Float    @default(0)
  cashOut     Float    @default(0)
  closingCash Float    @default(0)
  notes       String?

  @@unique([date])
}

model BankTransaction {
  id            Int          @id @default(autoincrement())
  date          DateTime
  description   String
  debitAmount   Float        @default(0)
  creditAmount  Float        @default(0)
  balance       Float
  transactionId Int?         @unique // ADDED @unique here for one-to-one
  bankStatement String?
  isReconciled  Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  transaction   Transaction? @relation(fields: [transactionId], references: [id])
}

model ReportingPeriod {
  id          Int      @id @default(autoincrement())
  name        String
  startDate   DateTime
  endDate     DateTime
  revenue     Float    @default(0)
  expenses    Float    @default(0)
  profit      Float    @default(0)
  isFinalized Boolean  @default(false)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InventorySnapshot {
  id        Int      @id @default(autoincrement())
  itemId    Int
  date      DateTime @default(now())
  quantity  Float
  rate      Float
  value     Float
  method    String   @default("FIFO")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  item      Item     @relation(fields: [itemId], references: [id])
}

// ================
// Enumerations
// ================

enum UnitType {
  KG
  PIECE
}

enum PaymentMethodType {
  CASH
  BANK_TRANSFER
  CHEQUE
  UPI 
  CARD 
}

enum TransactionType {
  PURCHASE
  SALE
  PAYMENT // Represents an individual payment against a purchase or general payment
  RECEIPT // Represents an individual receipt against a sale or general receipt
  EXPENSE
  BANK_CHARGE
  OPENING_BALANCE
  ADJUSTMENT
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  INCOME
  EXPENSE
}